We thank the reviewers for their comments and suggestions. We will briefly explain how we addressed them for the camera ready version of our paper.


Reviewer 1:
This paper presents a bisimulation based type equivalence definition for a higher order functional calculus typed by context-free session types. The paper is well written and presents a simple and neat idea, which is good. The work is then applied to a programming language (FreeST) which is also nice. This work is build on several previous works from some of the authors and extends this previous work in a clear way. A few comments follow.

Related to Figure 2 please explain in more detail (with some examples) the notion of type reduction. For example, the Dual modality is intuitive but it deserves some motivation.
R:


Section 4 needs illustrating examples
R:


A latex detail: please use more the definition environment. Important definitions (such as bisimulation…) are given in the text and should be formal definitions.
R:


A last comment about the Validation section: this is at the same time a nice section and a pitfall. It is nice because it is rather cool to use Quickcheck to gain confidence about formal results. It is a pitfall because 
passing quickcheck tests is not a proof, and thus proofs are still needed. This is ok for the scope of Inforum, but we urge the authors to work on formal proofs for the presented properties.
R: 

-----------------

Reviewer 2:

This paper presents a lambda calculus with higher-order polymorphism (in the sense of Fomega) and equirecursive, context-free session types and its integration into FreeST,
a functional programming language in this space. The main contribution of the paper is a bisimulation-based type equivalence algorithm for the language, reducing the problem
to bisimilarity of simple grammars.

Carefully explain the word(T) function definition, potentially with an example, elaborating on why we can always produce a simple grammar from a higher-order polymorphic type.
R:

Explain the rules of the LTS and argue why the LTS is reasonable, given the definition of type reduction/normalization.
R:

Given some brief introduction of context-free session types (e.g. read off the meaning of a type in terms of its IO behaviour)
R:

-----------------

Reviewer 3:
The structure of the paper could be improved. Namely Section 3 covers around 6 pages (out of 11 pages) without any subsection, and jumping between relatively different topics that could be better organised. This section is called `System Fμ∗;ω`, but you never present the language, and only address the types -- maybe a better title could reflect this.
R:

Furthermore, I would recommend to mention in the introduction:

  - the explicit and precise contributions so far; and
  - a summary of the core challenges and the validation approach
R:

Adding a link to your experiments would also help support your contributions.
R:

Regarding the rules, they all seem to be very deterministic.

 - Fig. 2 focuses on reducing only the left-most part of the term and it seems to me that there is only one choice at a time (by design);
   + here only the beta-reduction can induce infinite reductions, which is easy to miss and could be highlighted at this point with the (\x.xx)(\x.xx) example instead of later;

 - Fig. 5 focuses on exposing the structure of the term to labels (to be compared via bisimulation)
   + here there seems to be more than one choice possible, but it is still deterministic (making the bisimulation very easy to find, and probably a simpler notion would be enough).
R:

Regarding the bisimilarity of grammars - I am not sure how these are defined, and I got the impression that there were too many concepts that were not explained or defined when summarising the work by Almeida et al. [2].
R:

Finally, I would have liked to see a more complex example, maybe with a motivation storyline behind it (e.g., needing to "open" some files to be used by different worker-components, and to "close" them before proceeding). Maybe to show that it could be simplified, or that a problem could be detected (and that it could not be captured without the context-free nature).
R:

## Minor comments

§2, in the 2nd example with an abstraction - I suggest keeping the alpha in the same place as in the first example (instead of beta), and rename beta for something else.
R:

Fig. 1: I suggest adding parenthesis, e.g., in `* => (* => T)` (even though the community on functional programming knows this).
R:

Suggestion throughout §3: whenever you introduce a new concept (e.g., proper type, type operator, type formation, well-formed), use the \emph environment to highlight it.
R:

There is a typo in Fig. 2, rule R-D∀ (is the same as R-D∃)
R:

A type `T` is pre-kinded if `∆ ⊢pre T : κ`; I would add "for some context `∆` and kind `κ`" (or "`T` is pre-kinded if there exists (`∆` and `κ`) such that (...).")
R:

Fig. 5, rule L-Seq1: The syntax seems to be missing something.
R:

Fig. 5, rule L-ConstApp: I could not understand the premises.
R:

Fig. 6: I could not follow the syntax to define "word(T)" - I think some extra explanations would be useful.
R:

-----------------

Reviewer 4:
Este artigo apresenta a integração do cálculo lambda de ordem superior
com tipos equi-recursivos e tipos de sessão livres de contexto na
linguagem de programação FreeST. Os autores apresentam as dificuldades
técnicas inerentes à utilização de um sistema de tipos tão expressivo,
assim como os desafios de implementar um tal sistema numa linguagem de
programação. É igualmente apresentada uma abordagem para demonstrar
equivalência de tipos, através de uma tradução para gramáticas em
forma normal de Greibach.

Introduction, "[...] comes with its own set of challenges,
especially when it comes to type equivalence algorithms". 
Porquê? Dito apenas desta forma soa demasiado vago e como apenas
    um problema pequeno, quando na verdade não o é. Dar mais detalhes
    e intuição aqui teriam ajudado (estamos no primeiro parágrafo do
    artigo, é ainda muito importante prender e motivar o leitor). Uma
    referência também poderia ajudar.
R:

Motivation, pp 2, parágrafo Beyond first-order context-free
    session types. 
A descrição apresentada neste parágrafo recorre já a muitos
    conceitos e notação que só poderemos compreender em todo o
    detalhe a partir da secção 3.
R:

Motivation, pp 2, parágrafo Duality as an external macro (or not).
Até à última frase, o parágrafo lia-se muito bem e transmitia de
    facto uma mensagem intuitiva e de motivação para o resto do
    trabalho. No entanto, a última frase é completamente obscura e
    muito vaga para este contexto. Nesta fase tão inicial do artigo,
    seria interessante motivar o leitor com mais exemplos ou pelos
    problemas concretos e como este trabalho (sem entrar em detalhes)
    propõe de facto soluções. Além disso, no resto do artigo não
    encontramos mais nenhuma referência à dualidade de tipos sessão,
    portanto torna-se difícil perceber a importância deste parágrafo.
R:

Motivation.
A minha maior crítica é que esta é uma secção importantíssima e
    acaba por ser demasiado curta e com pouco conteúdo. Pelo texto
    apresentado não se consegue perceber o que é de facto trabalho
    novo e o que já está implementado em FreeST. Havendo ainda espaço
    no artigo, seria importante mostrar aqui exemplos mais elaboradas,
    não só de tipos mas também de programas que actualmente já podemos
    escrever em FreeST e outros que ainda não são possíveis de
    exprimir na linguagem, mas que graças a este trabalho já o poderão
    ser.
R:

Pp 6, equivalência entre tipos T e U.
A apresentação do itemize que se segue é estranha. Para além do
    impacto visual, já que introduz um espaço branco enorme no corpo
    do artigo, não se percebe se esta apresentação seria um teorema,
    uma definição ou de facto um exemplo. Seria por isso apropriado
    utilizar um ambiente que realce a natureza do que se pretende
    apresentar.
R:

Fim da secção Challenges.
A escolha de pseudo-código para ilustrar o processo de
    normalização parece-me estranha. a codificação utilizada parece
    demasiado próxima de código Haskell. Por isso, teria sido melhor
    apresentar de facto a implementação em Haskell. Os autores
    poderiam também optar por uma apresentação baseada em regras de
    inferência, já que a mensagem importante é o algoritmo.
R:

Secção 5, Validation.
Esta parece-me a secção com o conteúdo mais pobre do artigo. Desde
    logo, é um mistério completo a utilização da biblioteca
    Quickcheck. Só com algum poder de adivinhação, baseada na
    descrição da máquina em que se realizaram os testes, se poderá
    inferir que a implementação do sistema é feita em Haskell.

    No entanto, a minha maior questão é porque é que os autores
    concentram a validação apenas na geração de tipos
    aleatórios. Porque não apresentam termos da linguagem FreeST
    estendida que podemos agora verificar? Depois de ler esta secção
    fico com a sensação que de facto não há grande relação entre a
    linguagem FreeST e o trabalho aqui apresentado.
R:


-----------------

Reviewer 5:
Este é um meta-review, com um sumário do que o PC acha serem as questões essenciais a endereçar na versão camera-ready.

O artigo assume muito dos seus leitores, apresentando de forma demasiado resumida alguns aspetos críticos, usando mesmo conceitos elaborados sem os introduzir. Vale a pena explicar melhor as intuições e detalhes técnicos centrais, ilustrando com mais exemplos.
R:

As contribuições do artigo devem também ser melhor sistematizadas, bem como o trabalho que foi de facto realizado.
R: